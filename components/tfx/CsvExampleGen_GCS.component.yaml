description: |
  Executes the CsvExampleGen component.

      Args:
        input_base: A Channel of 'ExternalPath' type, which includes one artifact
          whose uri is an external directory with csv files inside (required).
        input_config: An example_gen_pb2.Input instance, providing input
          configuration. If unset, the files under input_base will be treated as a
          single split.
        output_config: An example_gen_pb2.Output instance, providing output
          configuration. If unset, default splits will be 'train' and 'eval' with
          size 2:1.
        ??? example_artifacts: Optional channel of 'ExamplesPath' for output train and
          eval examples.
        ??? input: Forwards compatibility alias for the 'input_base' argument.
        ??? instance_name: Optional unique instance name. Necessary if multiple
          CsvExampleGen components are declared in the same pipeline.
implementation:
  container:
    args:
    - --input-base-path
    - inputValue: input_base_path
    - --output-examples-path
    - inputValue: output_examples_path
    - if:
        cond:
          isPresent: input_config
        then:
        - --input-config
        - inputValue: input_config
    - if:
        cond:
          isPresent: output_config
        then:
        - --output-config
        - inputValue: output_config
    - '----output-paths'
    - outputPath: examples_path
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'tfx==0.14' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'tfx==0.14' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      from typing import NamedTuple

      def CsvExampleGen_GCS( #
          # Inputs
          #input_base_path: InputPath('ExternalPath'),
          input_base_path: 'ExternalPath', # A Channel of 'ExternalPath' type, which includes one artifact whose uri is an external directory with csv files inside (required).

          # Outputs
          #output_examples_path: OutputPath('ExamplesPath'),
          output_examples_path: 'ExamplesPath',

          # Execution properties
          #input_config_splits: {'List' : {'item_type': 'ExampleGen.Input.Split'}},
          input_config: 'ExampleGen.Input' = '{"splits": []}', # JSON-serialized example_gen_pb2.Input instance, providing input configuration. If unset, the files under input_base will be treated as a single split.
          #output_config_splits: {'List' : {'item_type': 'ExampleGen.SplitConfig'}},
          output_config: 'ExampleGen.Output' = '{"splitConfig": {"splits": []}}', # JSON-serialized example_gen_pb2.Output instance, providing output configuration. If unset, default splits will be 'train' and 'eval' with size 2:1.
          #custom_config: 'ExampleGen.CustomConfig' = None,
      ) -> NamedTuple('Outputs', [
          ('examples_path', 'ExamplesPath'),
      ]):
          """Executes the CsvExampleGen component.

          Args:
            input_base: A Channel of 'ExternalPath' type, which includes one artifact
              whose uri is an external directory with csv files inside (required).
            input_config: An example_gen_pb2.Input instance, providing input
              configuration. If unset, the files under input_base will be treated as a
              single split.
            output_config: An example_gen_pb2.Output instance, providing output
              configuration. If unset, default splits will be 'train' and 'eval' with
              size 2:1.
            ??? example_artifacts: Optional channel of 'ExamplesPath' for output train and
              eval examples.
            ??? input: Forwards compatibility alias for the 'input_base' argument.
            ??? instance_name: Optional unique instance name. Necessary if multiple
              CsvExampleGen components are declared in the same pipeline.
          """

          import json
          import os
          from tfx.components.example_gen import utils
          from tfx.components.example_gen.csv_example_gen.component import CsvExampleGen
          from tfx.types import standard_artifacts

          # Create input dict.
          # input_dict['input_base'] always has a single entry
          input_base = standard_artifacts.ExternalArtifact()
          input_base.uri = input_base_path
          input_dict = {
              'input_base': [input_base],
          }

          # Create output dict.
          input_config_dict = json.loads(input_config)
          output_config_dict = json.loads(output_config)
          split_names = utils.generate_output_split_names(input_config_dict, output_config_dict)
          output_dict_examples = []
          for split_name in split_names:
              output_split_examples = standard_artifacts.Examples(split=split_name)
              output_split_examples.uri = os.path.join(output_examples_path, split_name)
              output_dict_examples.append(output_split_examples)
          output_dict = {
              'examples': output_dict_examples,
          }

          # Create exec proterties.
          exec_properties = {
              'input_config': input_config,
              'output_config': output_config
          }

          executor = CsvExampleGen.EXECUTOR_SPEC.executor_class()
          executor.Do(
              input_dict=input_dict,
              output_dict=output_dict,
              exec_properties=exec_properties,
          )

          return (output_examples_path,)

      import argparse
      _parser = argparse.ArgumentParser(prog='CsvExampleGen_GCS', description="Executes the CsvExampleGen component.\n\n    Args:\n      input_base: A Channel of 'ExternalPath' type, which includes one artifact\n        whose uri is an external directory with csv files inside (required).\n      input_config: An example_gen_pb2.Input instance, providing input\n        configuration. If unset, the files under input_base will be treated as a\n        single split.\n      output_config: An example_gen_pb2.Output instance, providing output\n        configuration. If unset, default splits will be 'train' and 'eval' with\n        size 2:1.\n      ??? example_artifacts: Optional channel of 'ExamplesPath' for output train and\n        eval examples.\n      ??? input: Forwards compatibility alias for the 'input_base' argument.\n      ??? instance_name: Optional unique instance name. Necessary if multiple\n        CsvExampleGen components are declared in the same pipeline.\n")
      _parser.add_argument("--input-base-path", dest="input_base_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output-examples-path", dest="output_examples_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--input-config", dest="input_config", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--output-config", dest="output_config", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = CsvExampleGen_GCS(**_parsed_args)

      if not hasattr(_outputs, '__getitem__') or isinstance(_outputs, str):
          _outputs = [_outputs]

      _output_serializers = [
          str
      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    image: tensorflow/tensorflow:1.14.0-py3
inputs:
- name: input_base_path
  type: ExternalPath
- name: output_examples_path
  type: ExamplesPath
- default: '{"splits": []}'
  name: input_config
  optional: true
  type: ExampleGen.Input
- default: '{"splitConfig": {"splits": []}}'
  name: output_config
  optional: true
  type: ExampleGen.Output
name: CsvExampleGen_GCS
outputs:
- name: examples_path
  type: ExamplesPath
